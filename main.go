package main

import (
	"fmt"
	"os"

	botAdapter "huskyholdem/adapters/bot"
	gameAdapter "huskyholdem/adapters/game"
	handler "huskyholdem/adapters/handler/http"
	gameHandler "huskyholdem/adapters/handler/ws"
	userAdapter "huskyholdem/adapters/user"
	autils "huskyholdem/adapters/utils"
	service "huskyholdem/service"

	_ "github.com/lib/pq"

	"github.com/joho/godotenv"
)

// @title HuskyHoldem API documentation
// @version 1.0.0
//
// @description This is Huskyholdem backend services' API written in Go using Gin web framework with documents generated by Swagger.
//
// @contact.name Peter Bagas
// @contact.url	huskyholdem.com
// @contact.email admin@huskyholdem.com
//
// @host localhost:8080
// @BasePath /v1
func main() {

	messageC := make(chan string)

	err := godotenv.Load()
	if err != nil {
		fmt.Println("Error loading .env file")
		os.Exit(1)
	}
	port := os.Getenv("PORT")

	var (
		host     = os.Getenv("HOST")
		dbport   = os.Getenv("POSTGRESS_PORT_DEVELOPMENT")
		user     = os.Getenv("POSTGRES_USER_DEVELOPMENT")
		password = os.Getenv("POSTGRES_PASSWORD_DEVELOPMENT")
		dbname   = os.Getenv("POSTGRES_DB_DEVELOPMENT")
	)

	postgresDbClient := autils.NewPostgressDb(host, dbport, user, password, dbname)
	redisCacheClient := autils.NewRedisCache()
	if redisCacheClient == nil {
		fmt.Println("Unable to connect to redis")
		os.Exit(1)
	}
	fmt.Println("Successfully connected to redis")

	db, err := postgresDbClient.Connect()
	if err != nil {
		fmt.Println("Unable to connect to database: " + err.Error())
		os.Exit(1)
	}
	fmt.Println("Successfully connected to database")
	defer postgresDbClient.Close(db)

	// go routine whenever a new message is send to messageC, send back a message say AAA
	go func() {
		for {
			select {
			case msg := <-messageC:
				fmt.Println("Message from channel: ", msg)
				// conn.WriteMessage(websocket.TextMessage, []byte("AAA"))
			}
		}
	}()

	userRepo := userAdapter.NewUserRepository(db)
	userCache := userAdapter.NewUserCache(redisCacheClient)

	userService := service.NewUserService(userRepo, userCache)

	botCache := botAdapter.NewBotCache(redisCacheClient)
	botRepository := botAdapter.NewBotRepository(db)

	botService := service.NewBotService(botRepository, botCache)

	gameRepository := gameAdapter.NewGameRepository(db)
	gameService := service.NewGameService(gameRepository)

	pingHandler := handler.NewPingHandler()
	authHandler := handler.NewAuthHandler(userService)
	botHandler := handler.NewBotHandler(botService, userService)

	gameHandler := gameHandler.NewGameHandler(gameService, messageC)

	router, err := handler.NewRouter(pingHandler, authHandler, botHandler, gameHandler)
	if err != nil {
		fmt.Println("Unable to start application: " + err.Error())
		os.Exit(1)
	}

	err = router.Run(":" + port)
	if err != nil {
		fmt.Println("Unable to start http: " + err.Error())
		os.Exit(1)
	}
}
